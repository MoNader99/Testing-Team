"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_PID_REGEXP = new RegExp(`^${WEBVIEW_BASE}(\\d+)`);
const WEBVIEW_PKG_REGEXP = new RegExp(`^${WEBVIEW_BASE}([^\\d\\s][\\w.]*)`);
const CHROMIUM_WIN = 'CHROMIUM';
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const DEFAULT_WEBVIEW_DEVTOOLS_PORT = 9222;
const DEVTOOLS_SOCKET_PATTERN = /@[\w.]+_devtools_remote_?(\d+)?\b/;
const CROSSWALK_SOCKET_PATTERN = /@([\w.]+)_devtools_remote\b/;
const CHROMIUM_DEVTOOLS_SOCKET = 'chrome_devtools_remote';
const CHROME_PACKAGE_NAME = 'com.android.chrome';
let helpers = {};
exports.helpers = helpers;

async function getPotentialWebviewProcs(adb) {
  const out = await adb.shell(['cat', '/proc/net/unix']);
  const names = [];

  for (const line of out.split('\n')) {
    const [,,, flags,, st,, sockPath] = line.trim().split(/\s+/);

    if (!sockPath) {
      continue;
    }

    if (flags !== '00010000' || st !== '01') {
      continue;
    }

    if (!DEVTOOLS_SOCKET_PATTERN.test(sockPath)) {
      continue;
    }

    names.push(sockPath);
  }

  if (_lodash.default.isEmpty(names)) {
    _logger.default.debug('Found no active devtools sockets. Other sockets are:');

    _logger.default.debug(out);
  } else {
    _logger.default.debug(`Parsed ${names.length} active devtools ${_appiumSupport.util.pluralize('socket', names.length, false)}: ` + JSON.stringify(names));
  }

  return _lodash.default.uniq(names);
}

async function webviewsFromProcs(adb, deviceSocket = null) {
  const socketNames = await getPotentialWebviewProcs(adb);
  const webviews = [];

  for (const socketName of socketNames) {
    if (deviceSocket === CHROMIUM_DEVTOOLS_SOCKET && socketName === `@${deviceSocket}`) {
      webviews.push({
        proc: socketName,
        webview: CHROMIUM_WIN
      });
      continue;
    }

    const socketNameMatch = DEVTOOLS_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch) {
      continue;
    }

    const crosswalkMatch = CROSSWALK_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch[1] && !crosswalkMatch) {
      continue;
    }

    if (deviceSocket && socketName === `@${deviceSocket}` || !deviceSocket) {
      webviews.push({
        proc: socketName,
        webview: socketNameMatch[1] ? `${WEBVIEW_BASE}${socketNameMatch[1]}` : `${WEBVIEW_BASE}${crosswalkMatch[1]}`
      });
    }
  }

  return webviews;
}

async function webviewHasPages(adb, {
  proc,
  webview
}, webviewDevtoolsPort) {
  const wvPort = webviewDevtoolsPort || DEFAULT_WEBVIEW_DEVTOOLS_PORT;
  const remotePort = proc.replace(/^@/, '');
  const portAlreadyForwarded = (await adb.getForwardList()).map(line => line.split(' ')[1]).reduce((acc, portSpec) => acc || portSpec === `tcp:${wvPort}`, false);

  if (portAlreadyForwarded) {
    _logger.default.info(`Port ${wvPort} was already forwarded`);
  } else {
    await adb.adbExec(['forward', `tcp:${wvPort}`, `localabstract:${remotePort}`]);
  }

  const remoteDebugger = `http://127.0.0.1:${wvPort}/json/list`;

  _logger.default.debug(`Attempting to get list of pages for webview '${webview}' ` + `from the remote debugger at ${remoteDebugger}.`);

  let hasPages = false;

  try {
    const pages = await (0, _requestPromise.default)({
      uri: remoteDebugger,
      json: true
    });

    if (pages.length > 0) {
      hasPages = true;
    }

    _logger.default.info(`Webview '${webview}' has ${_appiumSupport.util.pluralize('page', pages.length, true)}`);
  } catch (e) {
    _logger.default.warn(`Got error when retrieving page list, will assume no pages: ${e}`);
  }

  if (!portAlreadyForwarded) {
    await adb.removePortForward(wvPort);
  }

  return hasPages;
}

helpers.procFromWebview = async function procFromWebview(adb, webview) {
  const pidMatch = WEBVIEW_PID_REGEXP.exec(webview);

  if (!pidMatch) {
    throw new Error(`Could not find PID for webview '${webview}'`);
  }

  const pid = pidMatch[1];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug(`Getting process name for webview '${webview}'`);

  const pkg = await adb.getNameByPid(pid);

  _logger.default.debug(`Got process name: '${pkg}'`);

  return pkg;
};

helpers.getWebviews = async function getWebviews(adb, {
  androidDeviceSocket = null,
  ensureWebviewsHavePages = null,
  webviewDevtoolsPort = null
} = {}) {
  _logger.default.debug('Getting a list of available webviews');

  let webviewsMapping = await webviewsFromProcs(adb, androidDeviceSocket);

  if (ensureWebviewsHavePages) {
    _logger.default.info('Retrieved potential webviews; will filter out ones with no active pages');

    webviewsMapping = await (0, _asyncbox.asyncfilter)(webviewsMapping, async wp => await webviewHasPages(adb, wp, webviewDevtoolsPort), false);
  } else {
    _logger.default.info('Not checking whether webviews have active pages; use the ' + "'ensureWebviewsHavePages' cap to turn this check on");
  }

  const webviews = webviewsMapping.map(wp => wp.webview);
  const result = [];

  if (androidDeviceSocket) {
    result.push(...webviews);
  } else {
    for (const webviewName of webviews) {
      try {
        const pkgMatch = WEBVIEW_PKG_REGEXP.exec(webviewName);
        const pkg = pkgMatch ? pkgMatch[1] : await helpers.procFromWebview(adb, webviewName);
        result.push(`${WEBVIEW_BASE}${pkg}`);
      } catch (e) {
        _logger.default.warn(e.message);
      }
    }
  }

  _logger.default.debug(`Found ${_appiumSupport.util.pluralize('webview', result.length, true)}: ${JSON.stringify(result)}`);

  return result;
};

helpers.createChromedriverCaps = function createChromedriverCaps(opts, deviceId) {
  var _opts$chromeOptions, _opts$chromeOptions2;

  const caps = {
    chromeOptions: {
      androidPackage: ((_opts$chromeOptions = opts.chromeOptions) === null || _opts$chromeOptions === void 0 ? void 0 : _opts$chromeOptions.androidPackage) || opts.appPackage
    }
  };

  if (_lodash.default.isBoolean(opts.chromeUseRunningApp)) {
    caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;
  }

  if (opts.chromeAndroidPackage) {
    caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;
  }

  if (opts.chromeAndroidActivity) {
    caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;
  }

  if (opts.chromeAndroidProcess) {
    caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;
  }

  if (_lodash.default.toLower(opts.browserName) === 'chromium-webview') {
    _logger.default.info(`Automatically setting 'androidActivity' capability ` + `to '${opts.appActivity}' for '${opts.browserName}' browser`);

    caps.chromeOptions.androidActivity = opts.appActivity;
  }

  if (opts.pageLoadStrategy) {
    caps.pageLoadStrategy = opts.pageLoadStrategy;
  }

  if (_lodash.default.toLower(caps.chromeOptions.androidPackage) === 'chrome') {
    _logger.default.info(`'androidPackage' Chromedriver capability has been ` + `automatically corrected to '${CHROME_PACKAGE_NAME}'`);

    caps.chromeOptions.androidPackage = CHROME_PACKAGE_NAME;
    delete caps.chromeOptions.androidActivity;
    delete caps.chromeOptions.androidProcess;
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;

  if (opts.loggingPrefs) {
    caps.loggingPrefs = opts.loggingPrefs;
  }

  if (opts.enablePerformanceLogging) {
    _logger.default.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` + `the 'loggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);

    const newPref = {
      performance: 'ALL'
    };
    caps.loggingPrefs = caps.loggingPrefs ? Object.assign({}, caps.loggingPrefs, newPref) : newPref;
  }

  if ((_opts$chromeOptions2 = opts.chromeOptions) === null || _opts$chromeOptions2 === void 0 ? void 0 : _opts$chromeOptions2.Arguments) {
    opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
    delete opts.chromeOptions.Arguments;
  }

  for (const [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
    if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
      caps.chromeOptions[opt] = val;
    } else {
      _logger.default.info(`The '${opt}' chromeOption (${caps.chromeOptions[opt]}) ` + `won't be applied to Chromedriver capabilities because it has been already assigned before`);
    }
  }

  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
